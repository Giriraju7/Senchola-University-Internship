# -*- coding: utf-8 -*-
"""Titanic Survival Prediction .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kC6aFmyRDYIncqll0rA2ur7ONHyVYlsr

***Titanic Survival Prediction Task -Giriraju***

---

**Import Data from csv file**
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

df=pd.read_csv('/content/Titanic DS.csv')

df.head()

df.info()

"""**Finding missing values in the data set**"""

df.isnull().sum()

"""We cannot drop the age column as we need to use that column for visualisation

**Imputing missing values in the data set**
"""

df['Age'].fillna(df['Age'].mean(),inplace=True)

df['Fare'].fillna(df['Fare'].mean(),inplace=True)

df['Embarked'].fillna(df['Embarked'].mode()[0],inplace=True)

"""**Checking the values after imputing**"""

df.isnull().sum()

"""Now we can see the data are cleaned (ie) No missing values

**Statistics**
"""

df.describe()

df['Survived'].value_counts()

df['Sex'].value_counts()

df['Embarked'].value_counts()

"""**Output/Visualisation**

1. Total no of Passengers
"""

Passengers=df['Name'].count()
print('Total number of Passengers are',Passengers )

"""2. Number of Alive Passenger"""

Alive_Passengers=df['Survived'].value_counts()[1]
print('Number of Alive Passengers are',Alive_Passengers )

"""3. Number of Dead Passenger"""

Dead_Passengers=df['Survived'].value_counts()[0]
print('Number of Alive Passengers are',Dead_Passengers )

"""4. Total Fare Price"""

Total_Fare_price=df['Fare'].sum()
print('Total Fare Price is $',Total_Fare_price.round(2))

"""5. Gender based Classification"""

print("Gender based Classification is below")
gender_classification=df['Sex'].value_counts()
plt.figure(figsize=(6, 6))
plt.pie(gender_classification, labels=gender_classification.index, autopct='%0.2f%%')
plt.title("Gender Classification")
plt.show()

"""6. Passenger by class"""

print("Passenger by class is below")
P_class=df['Pclass'].value_counts()
plt.figure(figsize=(8, 6))
P_class.plot(kind='bar', rot=0)
ax = P_class.plot(kind='bar', rot=0)
plt.title("Passenger by Class")
for i, v in enumerate(P_class):
    ax.text(i, v + 0.2, str(v), ha='center', va='bottom')
plt.show()

"""   7. Survival & Died percentage"""

total_passengers = len(df)
survived_count = df['Survived'].sum()
died_count = total_passengers - survived_count

survival_percentage = (survived_count / total_passengers) * 100
death_percentage = (died_count / total_passengers) * 100

print(f"Survival Percentage: {survival_percentage:.2f}%")
print(f"Death Percentage: {death_percentage:.2f}%")

plt.figure(figsize=(6, 6))
plt.pie([survival_percentage, death_percentage], labels=['Survived', 'Died'],autopct='%0.2f%%')
plt.title("Survival vs. Death Percentage")
plt.show()

"""8. Survive by gender"""

gender_survival = df.groupby('Sex')['Survived'].sum()

gender_survival = gender_survival.round(2)
print(gender_survival)
ax = gender_survival.plot(kind='bar', rot=0)
for i, v in enumerate(gender_survival):
    ax.text(i, v + 0.2, str(v), ha='center', va='bottom')
gender_survival.plot(kind='bar', rot=0)
plt.title("Survive by Gender")
plt.show()

"""9. Died by Gender"""

gender_death = gender_classification-gender_survival

gender_death = gender_death.round(2)
print(gender_death)

plt.figure(figsize=(8, 6))
ax = gender_death.plot(kind='bar', rot=0, color='red')
plt.title("Died by Gender")

# Add data labels
for i, v in enumerate(gender_death):
    ax.text(i, v + 0.2, str(v), ha='center', va='bottom', color='black')

gender_death.plot(kind='bar', rot=0, color='red')
plt.title("Died by Gender")
plt.show()

"""10. Passenger based on Age Group"""

bins = [0, 18, 30, 50, 80]
age_labels = ['0-18', '18-30', '30-50', '50+']
df['AgeGroup'] = pd.cut(df['Age'], bins, labels=age_labels)
passengers_by_age_group = df['AgeGroup'].value_counts()

ax = passengers_by_age_group.plot(kind='bar', rot=0)
print("Passenger based on Age Group:")

for i, v in enumerate(passengers_by_age_group):
    ax.text(i, v + 0.2, str(v), ha='center', va='bottom')

plt.title("Passenger Based on Age Group")
plt.show()

"""   **THANK YOU!!**"""