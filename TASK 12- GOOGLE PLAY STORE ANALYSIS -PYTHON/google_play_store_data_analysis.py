# -*- coding: utf-8 -*-
"""Google Play Store Data Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WxjDJPUhJri5_Wj4T7NJTPF2I6fbIa1n

**Google Play Store Data Analysis - Giriraju**

Import Dataset from csv
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('/content/googleplaystore.csv')

df.head()

df.info()

"""Finding missing values in the dataset"""

df.isnull().sum()

df.boxplot();

"""See , there is one outlier and it's beyond 17.5 . Ratings of Google play Store apps will be 0 to 5 only, So we should remove that row.

**Checking the number of outliers**
"""

df[df.Rating>5]

df.drop([10472], inplace=True)

df.boxplot();

"""Now that outlier has been removed !!

**Now , Imputing the missing values in the Rating column**
"""

df['Rating'].fillna(df['Rating'].mean(),inplace=True)

Total_apps=df['App'].count()
print("The Total app counts are : ",Total_apps)

"""**DATA VISUALIZATION**

1.Distribution of App Categories:
"""

category_order = df['Category'].value_counts().index


plt.figure(figsize=(20, 6))
ax = sns.countplot(x='Category', data=df, order=category_order)

plt.xticks(rotation=90)

for p in ax.patches:
    ax.annotate(f'{p.get_height()}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', xytext=(0, 10), textcoords='offset points')

plt.title('Distribution of App Categories')
plt.show()

"""2.Average Ratings by Category:"""

avg_ratings_by_category = df.groupby('Category')['Rating'].mean().sort_values(ascending=False)
category_order = avg_ratings_by_category.index


plt.figure(figsize=(20, 6))
ax = sns.barplot(x='Category', y='Rating', data=df, order=category_order)


plt.xticks(rotation=90)


for p in ax.patches:
    ax.annotate(f'{p.get_height():.2f}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', xytext=(0, 10), textcoords='offset points')

plt.title('Average Ratings by Category')
plt.show()

"""3.App Types Distribution:"""

type_order = df['Type'].value_counts().index


plt.figure(figsize=(8, 6))
ax = sns.countplot(x='Type', data=df, order=type_order)


for p in ax.patches:
    ax.annotate(f'{p.get_height()}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', xytext=(0, 10), textcoords='offset points')

plt.title('Distribution of App Types')
plt.show()

"""4.Top 10 Genres with the Most Installs:"""

if not pd.api.types.is_numeric_dtype(df['Installs']):
    df['Installs'] = df['Installs'].str.replace(',', '').str.replace('+', '').astype(int)


top_genres = df.groupby('Genres')['Installs'].sum().sort_values(ascending=False).head(10)


top_genres = top_genres / 1e6


plt.figure(figsize=(20, 6))
ax = top_genres.sort_values().plot(kind='barh', color='skyblue')


for p in ax.patches:
    ax.annotate(f'{p.get_width():,.2f}M', (p.get_width(), p.get_y() + p.get_height() / 2),
                ha='center', va='center', xytext=(10, 0), textcoords='offset points')

plt.title('Top 10 Genres with the Most Installs')
plt.xlabel('Total Installs (Millions)')
plt.ylabel('Genres')
plt.show()

"""5.Correlation between Size and Rating:"""

plt.figure(figsize=(20, 6))
sns.scatterplot(x='Size', y='Rating', data=df)
plt.title('Correlation between Size and Rating')
plt.show()

"""6.Content Rating Distribution:"""

plt.figure(figsize=(20, 6))
ax = sns.countplot(x='Content Rating', data=df)


for p in ax.patches:
    ax.annotate(f'{p.get_height()}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', xytext=(0, 10), textcoords='offset points')

plt.title('Distribution of Content Ratings')
plt.show()

"""7.Price Distribution of Paid Apps:"""

plt.figure(figsize=(20, 6))
ax = sns.histplot(df[df['Type'] == 'Paid']['Price'], bins=20, kde=True)


sorted_prices = sorted(df[df['Type'] == 'Paid']['Price'], reverse=True)

for p, value in zip(ax.patches[:10], sorted_prices[:10]):
    height = p.get_height()
    ax.text(p.get_x() + p.get_width()/2., height, f'{int(height)}', ha="center", va="bottom")


plt.xticks(sorted_prices[:10])

plt.title('Top 10 Price Bins in the Distribution of Paid Apps')
plt.xlabel('Price')
plt.ylabel('Count')
plt.show()

"""8.Top 10 Apps with the Highest Reviews:"""

df['Reviews'] = pd.to_numeric(df['Reviews'], errors='coerce')


aggregated_reviews = df.groupby('App')['Reviews'].sum().reset_index()


top_reviews = aggregated_reviews.nlargest(10, 'Reviews')


plt.figure(figsize=(20, 6))
plt.pie(top_reviews['Reviews'], labels=top_reviews['App'], autopct='%1.1f%%', startangle=90)

centre_circle = plt.Circle((0,0),0.70,fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)

plt.title('Top 10 Apps with the Highest Reviews')
plt.show()

"""9.Apps Distribution Based on Android Version:"""

plt.figure(figsize=(20, 6))
ax = sns.countplot(x='Android Ver', data=df, order=df['Android Ver'].value_counts().index)

for p in ax.patches:
    height = p.get_height()
    ax.annotate(f'{int(height)}', (p.get_x() + p.get_width()/2., height),
                ha='center', va='bottom', xytext=(0, 10), textcoords='offset points')

plt.xticks(rotation=90)
plt.title('Apps Distribution Based on Android Version')
plt.show()

"""10.Proportion of Free and Paid Apps in Each Category:"""

category_order = df['Category'].value_counts().index

plt.figure(figsize=(20, 6))
ax = sns.countplot(x='Category', hue='Type', data=df, order=category_order)

for p in ax.patches:
    height = p.get_height()
    ax.annotate(f'{int(height)}', (p.get_x() + p.get_width() / 2., height),
                ha='center', va='bottom', xytext=(0, 10), textcoords='offset points')

plt.xticks(rotation=90)
plt.title('Proportion of Free and Paid Apps in Each Category')
plt.show()

"""                                                                                      **THANK YOU !!**"""

