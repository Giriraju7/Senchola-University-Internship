# -*- coding: utf-8 -*-
"""Senchola Task 4-Batch 1 Details.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nL_0kLyXaX_YMeY3AnrQdL6-MMJZvmNc

## **Sechola Batch 1 Applicant Details**

Importing dataset from excel
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from wordcloud import WordCloud

df_1=pd.read_excel('/content/batch 1 application.xlsx', sheet_name='Form Responses 1')
df_2= pd.read_excel('/content/batch 1 application.xlsx', sheet_name='Selected')

df_1.head()

df_1.info()
df_2.info()

df_1.isnull().sum()
df_2.isnull().sum()

df_1.columns

"""## Insights

**1)Total Applicants & Shortlisted**
"""

Total_Applicants=df_1['Name '].value_counts().sum()
print('Total Applicants in Sechola Batch 1 Internship is', Total_Applicants)

Total_Shortlisted=df_2['Name '].value_counts().sum()
print('Total Shortlisted in Sechola Batch 1 Internship is', Total_Shortlisted)

"""**2)Total Colleges for applicants & shortlisted**"""

Total_Colleges_1=df_1['College Name'].nunique()
print('Total Colleges for applicants in Sechola Batch 1 Internship is', Total_Colleges_1)

Total_Colleges_2=df_2['College Name'].nunique()
print('Total Colleges for shortlisted in Sechola Batch 1 Internship is', Total_Colleges_2)

"""**3)Total Cities for applicants & shortlisted**"""

Total_Cities_1=df_1['City'].nunique()
print('Total Cities for applicants in Sechola Batch 1 Internship is', Total_Cities_1)

Total_Cities_2=df_2['City'].nunique()
print('Total Cities for shortlisted in Sechola Batch 1 Internship is', Total_Cities_2)

"""**4)Applicants & Shortlisted Applicants by gender**"""

gender_counts_1 = df_1['Gender'].value_counts()
gender_counts_2 = df_2['Gender'].value_counts()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(7, 5))
ax1.pie(gender_counts_1, labels=gender_counts_1.index, autopct='%1.2f%%', startangle=140,)
ax1.set_title('Applicants Gender Classification')
ax2.pie(gender_counts_2, labels=gender_counts_2.index, autopct='%1.2f%%', startangle=140, )
ax2.set_title('Shortlisted Applicants by Gender')
plt.tight_layout()
plt.show()

"""**4)Applicants & Shortlisted Applicants by Openness to learn**"""

openness_to_learn_1 = df_1['Are you open to learn ?'].value_counts()
openness_to_learn_2 = df_2['Are you open to learn ?'].value_counts()
colors = ['green', 'red', 'yellow']
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(7, 5))
ax1.pie(openness_to_learn_1, labels=openness_to_learn_1.index, autopct='%1.2f%%', startangle=140,)
ax1.set_title('Applicants Openness to Learn')
ax2.pie(openness_to_learn_2, labels=openness_to_learn_2.index, autopct='%1.2f%%', startangle=140, )
ax2.set_title('Shortlisted Openness to Learn')

plt.tight_layout()
plt.show()

"""**5)Laptop Availability**"""

laptop_availability = df_1['Do you have laptop '].value_counts()

colors = ['green', 'red']

plt.figure(figsize=(5,5))
plt.pie(laptop_availability, labels=laptop_availability.index, autopct='%2.2f%%', startangle=140, colors=colors)
plt.title('Laptop Availability')
plt.show()

"""**6)Motivation for joining**"""

text_data = ' '.join(df_1['Why you want to join this program ?'])
# Create a WordCloud object
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text_data)
# Display the WordCloud image
plt.figure(figsize=(5, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

"""**7)Applicants & Shortlisted Applicants by Qualification**"""

qualification_distribution_1 = df_1['Qualification'].value_counts()
qualification_distribution_2 = df_2['Qualification'].value_counts()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 5))


ax1.bar(qualification_distribution_1.index, qualification_distribution_1.values, color='blue')
ax1.set_title('Applicants Qualification Distribution')
ax1.set_xlabel('Qualification Level')
ax1.set_ylabel('Count')
ax1.set_xticks(qualification_distribution_1.index)
ax1.set_xticklabels(qualification_distribution_1.index, rotation=45, ha='right')

for i, value in enumerate(qualification_distribution_1.values):
    ax1.text(i, value + 0.2, str(value), ha='center', va='bottom')


ax2.bar(qualification_distribution_2.index, qualification_distribution_2.values, color='blue')
ax2.set_title('Shortlisted Qualification Distribution')
ax2.set_xlabel('Qualification Level')
ax2.set_ylabel('Count')
ax2.set_xticks(qualification_distribution_2.index)
ax2.set_xticklabels(qualification_distribution_2.index, rotation=45, ha='right')

for i, value in enumerate(qualification_distribution_2.values):
    ax2.text(i, value + 0.2, str(value), ha='center', va='bottom')

plt.tight_layout()
plt.show()

"""**8)Applicants & Shortlisted Applicants by Degree**"""

degree_distribution_1 = df_1['Degree'].str.upper().value_counts()
top_degrees_1 = degree_distribution_1.head(10)
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 5))
ax1.bar(top_degrees_1.index, top_degrees_1.values, color='blue')
ax1.set_title('Applicants Popular Degrees ')
ax1.set_xlabel('Degree')
ax1.set_ylabel('Count')
ax1.set_xticks(top_degrees_1.index)
ax1.set_xticklabels(top_degrees_1.index, rotation=45, ha='right')

for i, value in enumerate(top_degrees_1.values):
    ax1.text(i, value + 0.2, str(value), ha='center', va='bottom')


degree_distribution_2 = df_2['Degree'].str.upper().value_counts()
top_degrees_2 = degree_distribution_2.head(10)

ax2.bar(top_degrees_2.index, top_degrees_2.values, color='blue')
ax2.set_title('Shortlisted Popular Degrees ')
ax2.set_xlabel('Degree')
ax2.set_ylabel('Count')
ax2.set_xticks(top_degrees_2.index)
ax2.set_xticklabels(top_degrees_2.index, rotation=45, ha='right')

for i, value in enumerate(top_degrees_2.values):
    ax2.text(i, value + 0.2, str(value), ha='center', va='bottom')

plt.tight_layout()
plt.show()

"""**9)Applicants & Shortlisted Applicants by Pass-Out year**"""

pass_out_years_1 = df_1['Pass-out Year'].value_counts().sort_index()
pass_out_years_2 = df_2['Pass-out Year'].value_counts().sort_index()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 5))

ax1.plot(pass_out_years_1.index, pass_out_years_1.values, marker='o', color='blue', linestyle='-')
ax1.set_title('Applicants Year Distribution ')
ax1.set_xlabel('Year')
ax1.set_ylabel('Count')
ax1.set_xticks(pass_out_years_1.index)
ax1.set_xticklabels(pass_out_years_1.index, rotation=45)

for i, value in enumerate(pass_out_years_1.values):
    ax1.text(pass_out_years_1.index[i], value + 1, str(value), ha='center', va='bottom', fontsize=10, color='black')


ax2.plot(pass_out_years_2.index, pass_out_years_2.values, marker='o', color='blue', linestyle='-')
ax2.set_title('Shortlisted Applicants Year Distribution ')
ax2.set_xlabel('Year')
ax2.set_ylabel('Count')
ax2.set_xticks(pass_out_years_2.index)
ax2.set_xticklabels(pass_out_years_2.index, rotation=45)

for i, value in enumerate(pass_out_years_2.values):
    ax2.text(pass_out_years_2.index[i], value + 1, str(value), ha='center', va='bottom', fontsize=10, color='black')

plt.tight_layout()
plt.show()

"""**10) Confidence Rating**"""

confidence_rating_1 = df_1['Confidence Rating'].value_counts()
confidence_rating_2 = df_2['Confidence Rating'].value_counts()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))
ax1.pie(confidence_rating_1, labels=confidence_rating_1.index, autopct='%1.2f%%', startangle=140,)
ax1.set_title('Applicants Confidence Rating Classification')
ax2.pie(confidence_rating_2, labels=confidence_rating_2.index, autopct='%1.2f%%', startangle=140, )
ax2.set_title('Shortlisted Confidence Rating Classification')
plt.tight_layout()
plt.show()

"""**11) Applicant status**"""

Applicant_status = df_1['Status checked'].value_counts()

colors = ['red', 'green', 'yellow']

plt.figure(figsize=(5, 5))
wedges, texts, autotexts = plt.pie(Applicant_status, labels=Applicant_status.index, autopct='%1.1f%%', startangle=140, colors=colors, textprops={'fontsize': 12})


total_count = Applicant_status.sum()
for i, count in enumerate(Applicant_status):
    percentage = count / total_count * 100
    autotexts[i].set_text(f'{count} ({percentage:.2f}%)')


plt.title('Applicant Status Distribution')
plt.show()

"""**12)Shortlisted Applicants with comments**"""

selected_applicants = df_1[df_1['Status checked'] == 'Selected'][['Name ', 'Comments']]
standby_applicants = df_1[df_1['Status checked'] == 'Standby list'][['Name ', 'Comments']]

print('The selected applicants are:\n', selected_applicants)
print('\nThe Standby applicants are:\n', standby_applicants)

"""                                                **THANK YOU**"""